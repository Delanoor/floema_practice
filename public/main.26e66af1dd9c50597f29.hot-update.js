/*! For license information please see main.26e66af1dd9c50597f29.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefleoma("main",{"./app/classes/Page.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>L});var i=s("./node_modules/auto-bind/index.js"),a=s("./node_modules/events/events.js"),n=s.n(a),l=s("./node_modules/gsap/index.js"),r=s("./node_modules/prefix/index.js"),o=s.n(r),h=s("./node_modules/lodash/each.js"),m=s.n(h),c=s("./node_modules/lodash/map.js"),d=s.n(c),p=s("./app/animations/Button.js"),u=s("./app/animations/Link.js"),g=s("./app/animations/Label.js"),w=s("./app/animations/Title.js"),f=s("./app/animations/Parallax.js"),b=s("./app/animations/Paragraph.js"),v=s("./app/animations/Highlight.js"),P=s("./app/classes/Asyncload.js"),j=s("./app/utils/dom.js");const L=class extends(n()){constructor({classes:e,element:t,elements:s,id:a}){super(),(0,i.default)(this),this.classes={...e},this.selectors={element:t,elements:{preloaders:"[data-src]",animationsButtons:'[data-animation="button"]',animationsLinks:'[data-animation="link"]',animationsParallaxes:'[data-animation="parallax"]',animationHighlights:'[data-animation="highlight"]',animationLabels:'[data-animation="label"]',animationTitles:'[data-animation="title"]',animationParagraphs:'[data-animation="paragraph"]',...s}},this.scroll={ease:.07,position:0,current:0,target:0,limit:0},this.id=a,this.transformPrefix=o()("transform"),this.create()}create(){this.animations=[],this.element=document.querySelector(this.selectors.element),this.elements={},m()(this.selectors.elements,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=this.element.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))})),this.createAnimations(),this.createObserver(),this.createPreloader()}createAnimations(){this.animationsButtons=(0,j.mapEach)(this.elements.animationsButtons,((e,t)=>new p.default({element:e}))),this.animations.push(...this.animationsButtons),this.animationsLinks=(0,j.mapEach)(this.elements.animationsLinks,((e,t)=>new u.default({element:e}))),this.animations.push(...this.animationsLinks),this.animationHighlights=d()(this.elements.animationHighlights,(e=>new v.default({element:e}))),this.animations.push(...this.animationHighlights),this.animationTitles=d()(this.elements.animationTitles,(e=>new w.default({element:e}))),this.animations.push(...this.animationTitles),this.animationsParallaxes=(0,j.mapEach)(this.elements.animationsParallaxes,(e=>new f.default({element:e}))),this.animations.push(...this.animationsParallaxes),this.animationParagraphs=d()(this.elements.animationParagraphs,(e=>new b.default({element:e}))),this.animations.push(...this.animationParagraphs),this.animationLabels=d()(this.elements.animationLabels,(e=>new g.default({element:e}))),this.animations.push(...this.animationLabels)}createObserver(){this.observer=new window.ResizeObserver((e=>{for(const t of e)window.requestAnimationFrame((()=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight}))})),this.observer.observe(this.elements.wrapper)}createPreloader(){this.preloaders=d()(this.elements.preloaders,(e=>new P.default({element:e})))}reset(){this.scroll={ease:.07,position:0,current:0,target:0,limit:0}}set(e){this.scroll.current=this.scroll.target=this.scroll.last=e,this.transform(this.elements.wrapper,this.scroll.current)}show(e){return this.reset(),this.isVisible=!0,this.addEventListeners(),l.default.set(document.documentElement,{backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),Promise.resolve()}hide(e){return this.isVisible=!1,this.removeEventListeners(),Promise.resolve()}transform(e,t){e.style[this.transformPrefix]=`translate3d(0, ${-Math.round(t)}px, 0)`}onResize(){this.elements.wrapper&&window.requestAnimationFrame((()=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight,m()(this.animations,(e=>e.onResize&&e.onResize()))}))}onWheel(e){const t=e.pixelY;return this.scroll.target+=t,t}update(){this.scroll.target=l.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=l.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.ease),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&this.transform(this.elements.wrapper,this.scroll.current),m()(this.animations,(e=>{e.update&&e.update(this.scroll)})),this.scroll.last=this.scroll.current}addEventListeners(){}removeEventListeners(){}}}},(function(e){e.h=()=>"620421e84d222343c156"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,