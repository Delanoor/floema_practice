/*! For license information please see main.7406ab3f57c725d83e54.hot-update.js.LICENSE.txt */
self.webpackHotUpdatefleoma("main",{"./app/animations/Button.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var i=s("./node_modules/gsap/index.js"),n=s("./app/classes/Component.js"),a=s("./app/utils/easings.js"),r=s("./app/utils/text.js");class o extends n.default{constructor({element:e}){super({element:e}),this.createText(),this.createPath()}createText(){const e=this.element.textContent;this.elements.wrapper=this.element.querySelector("span"),this.elements.text=document.createElement("div"),this.elements.text.innerHTML=e,this.elements.textSpans=(0,r.split)({append:!1,element:this.elements.text,expression:""}),this.elements.hover=document.createElement("div"),this.elements.hover.innerHTML=e,this.elements.hoverSpans=(0,r.split)({append:!1,element:this.elements.hover,expression:""}),this.elements.wrapper.innerHTML="",this.elements.wrapper.appendChild(this.elements.text),this.elements.wrapper.appendChild(this.elements.hover),i.default.set(this.elements.hover,{left:0,position:"absolute",top:0}),this.timeline=i.default.timeline({paused:!0}),this.timeline.to(this.elements.textSpans,{duration:.5,ease:a.DEFAULT,transform:"rotate3d(1, 0.1, 0, -90deg)",stagger:.01},0),this.timeline.fromTo(this.elements.hoverSpans,{transform:"rotate3d(1, 0.1, 0, 90deg)"},{duration:.5,ease:a.DEFAULT,transform:"rotate3d(0, 0, 0, 90deg)",stagger:.01},.05)}createPath(){this.path=this.element.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.pathValue=this.pathLength,i.default.set(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.pathValue-=this.pathLength,i.default.to(this.path,{duration:1,ease:a.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.play()}onMouseLeave(){this.pathValue-=this.pathLength,i.default.to(this.path,{duration:1,ease:a.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/animations/Parallax.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>o});var i=s("./node_modules/prefix/index.js"),n=s.n(i);Object(function(){var e=new Error("Cannot find module 'utils/breakpoints'");throw e.code="MODULE_NOT_FOUND",e}());var a=s("./app/utils/dom.js"),r=s("./app/utils/math.js");const o=class{constructor({element:e}){this.transform=n()("transform"),this.element=e,this.media=e.querySelector("img"),this.media.onload=e=>{this.onResize()},this.isVisible=!1,this.parallax={current:-this.amount,target:-this.amount},this.scale={current:1.15,target:1.15},this.onResize()}onResize(){console.log("onResize"),this.amount=window.innerWidth<Object(function(){var e=new Error("Cannot find module 'utils/breakpoints'");throw e.code="MODULE_NOT_FOUND",e}())?10:150,this.offset=(0,a.getOffset)(this.element)}update(e){if(!this.offset)return;const{innerHeight:t}=window;e.current+t>=this.offset.top?(this.parallax=(0,r.clamp)(-this.amount,this.amount,(0,r.map)(this.offset.top-e.current,-this.offset.height,t,this.amount,-this.amount)),this.scale=(0,r.clamp)(1,1.15,(0,r.map)(this.offset.top-e.current,-this.offset.height,t,1,1.15)),this.media.style[this.transform]=`translate3d(0, ${this.parallax}px, 0) scale(${this.scale})`):this.media.style[this.transform]=`translate3d(0, -${this.amount}px, 0) scale(1.15)`}}},"./app/classes/Page.js":(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>x});var i=s("./node_modules/auto-bind/index.js"),n=s("./node_modules/events/events.js"),a=s.n(n),r=s("./node_modules/gsap/index.js"),o=s("./node_modules/prefix/index.js"),l=s.n(o),h=s("./node_modules/lodash/each.js"),m=s.n(h),p=s("./node_modules/lodash/map.js"),d=s.n(p),u=s("./app/animations/Button.js"),c=s("./app/animations/Label.js"),f=s("./app/animations/Title.js"),g=(s("./app/animations/Parallax.js"),s("./app/animations/Paragraph.js")),v=s("./app/animations/Highlight.js"),w=s("./app/classes/Asyncload.js"),L=s("./app/utils/dom.js");const x=class extends(a()){constructor({classes:e,element:t,elements:s,id:n}){super(),(0,i.default)(this),this.classes={...e},this.selectors={element:t,elements:{preloaders:"[data-src]",animationsButtons:'[data-animation="button"]',animationsLinks:'[data-animation="link"]',animationsParallaxes:'[data-animation="parallax"]',animationHighlights:'[data-animation="highlight"]',animationLabels:'[data-animation="label"]',animationTitles:'[data-animation="title"]',animationParagraphs:'[data-animation="paragraph"]',...s}},this.scroll={ease:.07,position:0,current:0,target:0,limit:0},this.id=n,this.transformPrefix=l()("transform"),this.create()}create(){this.animations=[],this.element=document.querySelector(this.selectors.element),this.elements={},m()(this.selectors.elements,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=this.element.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))})),this.createAnimations(),this.createObserver(),this.createPreloader()}createAnimations(){this.animationsButtons=(0,L.mapEach)(this.elements.animationsButtons,((e,t)=>new u.default({element:e}))),this.animations.push(...this.animationsButtons),this.animationHighlights=d()(this.elements.animationHighlights,(e=>new v.default({element:e}))),this.animations.push(...this.animationHighlights),this.animationTitles=d()(this.elements.animationTitles,(e=>new f.default({element:e}))),this.animations.push(...this.animationTitles),this.animationParagraphs=d()(this.elements.animationParagraphs,(e=>new g.default({element:e}))),this.animations.push(...this.animationParagraphs),this.animationLabels=d()(this.elements.animationLabels,(e=>new c.default({element:e}))),this.animations.push(...this.animationLabels)}createObserver(){this.observer=new window.ResizeObserver((e=>{for(const t of e)window.requestAnimationFrame((()=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight}))})),this.observer.observe(this.elements.wrapper)}createPreloader(){this.preloaders=d()(this.elements.preloaders,(e=>new w.default({element:e})))}reset(){this.scroll={ease:.07,position:0,current:0,target:0,limit:0}}set(e){this.scroll.current=this.scroll.target=this.scroll.last=e,this.transform(this.elements.wrapper,this.scroll.current)}show(e){return this.reset(),this.isVisible=!0,this.addEventListeners(),r.default.set(document.documentElement,{backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),Promise.resolve()}hide(e){return this.isVisible=!1,this.removeEventListeners(),Promise.resolve()}transform(e,t){e.style[this.transformPrefix]=`translate3d(0, ${-Math.round(t)}px, 0)`}onResize(){this.elements.wrapper&&window.requestAnimationFrame((()=>{this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight,m()(this.animations,(e=>e.onResize&&e.onResize()))}))}onWheel(e){const t=e.pixelY;return this.scroll.target+=t,t}update(){this.scroll.target=r.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=r.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.ease),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&this.transform(this.elements.wrapper,this.scroll.current),m()(this.animations,(e=>{e.update&&e.update(this.scroll)})),this.scroll.last=this.scroll.current}addEventListeners(){}removeEventListeners(){}}},"./app/utils/math.js":()=>{}},(function(e){e.h=()=>"f8e8849fe1d4e3f8f4dc"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBRUwsQ0FFQW1GLFFBQVFDLEdBQ04sTUFBTUMsRUFBUUQsRUFBZ0JFLE9BSTlCLE9BRkF6SSxLQUFLa0UsT0FBT1YsUUFBVWdGLEVBRWZBLENBQ1QsQ0FNQXZFLFNBQ0VqRSxLQUFLa0UsT0FBT1YsT0FBU2tFLEVBQUFBLFFBQUFBLE1BQUFBLE1BQ25CLEVBQ0ExSCxLQUFLa0UsT0FBT21CLE1BQ1pyRixLQUFLa0UsT0FBT1YsUUFHZHhELEtBQUtrRSxPQUFPWixRQUFVb0UsRUFBQUEsUUFBQUEsTUFBQUEsWUFDcEIxSCxLQUFLa0UsT0FBT1osUUFDWnRELEtBQUtrRSxPQUFPVixPQUNaeEQsS0FBS2tFLE9BQU94QyxNQUdWMUIsS0FBS2tFLE9BQU9aLFFBQVUsTUFDeEJ0RCxLQUFLa0UsT0FBT1osUUFBVSxHQUdwQnRELEtBQUtLLFNBQVNDLFNBQ2hCTixLQUFLMkIsVUFBVTNCLEtBQUtLLFNBQVNDLFFBQVNOLEtBQUtrRSxPQUFPWixTQUdwRG1DLElBQUt6RixLQUFLd0YsWUFBYTZDLElBQ3JCQSxFQUFVcEUsUUFBVW9FLEVBQVVwRSxPQUFPakUsS0FBS2tFLE9BQU8sSUFHbkRsRSxLQUFLa0UsT0FBT3FELEtBQU92SCxLQUFLa0UsT0FBT1osT0FDakMsQ0FNQWQsb0JBQXFCLENBRXJCSyx1QkFBd0IsK0NDelIxQjZGLEVBQW9CQyxFQUFJLElBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbGVvbWEvLi9hcHAvYW5pbWF0aW9ucy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vZmxlb21hLy4vYXBwL2FuaW1hdGlvbnMvUGFyYWxsYXguanMiLCJ3ZWJwYWNrOi8vZmxlb21hLy4vYXBwL2NsYXNzZXMvUGFnZS5qcyIsIndlYnBhY2s6Ly9mbGVvbWEvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnQnXG5cbmltcG9ydCB7IERFRkFVTFQgYXMgZWFzZSB9IGZyb20gJ3V0aWxzL2Vhc2luZ3MnXG5pbXBvcnQgeyBzcGxpdCB9IGZyb20gJ3V0aWxzL3RleHQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGVsZW1lbnRcbiAgICB9KVxuXG4gICAgdGhpcy5jcmVhdGVUZXh0KClcbiAgICB0aGlzLmNyZWF0ZVBhdGgoKVxuICB9XG5cbiAgY3JlYXRlVGV4dCAoKSB7XG4gICAgY29uc3QgdGV4dCA9IHRoaXMuZWxlbWVudC50ZXh0Q29udGVudFxuXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKVxuXG4gICAgdGhpcy5lbGVtZW50cy50ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLmVsZW1lbnRzLnRleHQuaW5uZXJIVE1MID0gdGV4dFxuICAgIHRoaXMuZWxlbWVudHMudGV4dFNwYW5zID0gc3BsaXQoe1xuICAgICAgYXBwZW5kOiBmYWxzZSxcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMudGV4dCxcbiAgICAgIGV4cHJlc3Npb246ICcnXG4gICAgfSlcblxuICAgIHRoaXMuZWxlbWVudHMuaG92ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuZWxlbWVudHMuaG92ZXIuaW5uZXJIVE1MID0gdGV4dFxuICAgIHRoaXMuZWxlbWVudHMuaG92ZXJTcGFucyA9IHNwbGl0KHtcbiAgICAgIGFwcGVuZDogZmFsc2UsXG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLmhvdmVyLFxuICAgICAgZXhwcmVzc2lvbjogJydcbiAgICB9KVxuXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmlubmVySFRNTCA9ICcnXG4gICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudHMudGV4dClcbiAgICB0aGlzLmVsZW1lbnRzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50cy5ob3ZlcilcblxuICAgIEdTQVAuc2V0KHRoaXMuZWxlbWVudHMuaG92ZXIsIHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMFxuICAgIH0pXG5cbiAgICB0aGlzLnRpbWVsaW5lID0gR1NBUC50aW1lbGluZSh7IHBhdXNlZDogdHJ1ZSB9KVxuXG4gICAgdGhpcy50aW1lbGluZS50byh0aGlzLmVsZW1lbnRzLnRleHRTcGFucywge1xuICAgICAgZHVyYXRpb246IDAuNSxcbiAgICAgIGVhc2UsXG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUzZCgxLCAwLjEsIDAsIC05MGRlZyknLFxuICAgICAgc3RhZ2dlcjogMC4wMVxuICAgIH0sIDApXG5cbiAgICB0aGlzLnRpbWVsaW5lLmZyb21Ubyh0aGlzLmVsZW1lbnRzLmhvdmVyU3BhbnMsIHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZTNkKDEsIDAuMSwgMCwgOTBkZWcpJ1xuICAgIH0sIHtcbiAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICBlYXNlLFxuICAgICAgdHJhbnNmb3JtOiAncm90YXRlM2QoMCwgMCwgMCwgOTBkZWcpJyxcbiAgICAgIHN0YWdnZXI6IDAuMDFcbiAgICB9LCAwLjA1KVxuICB9XG5cbiAgY3JlYXRlUGF0aCAoKSB7XG4gICAgdGhpcy5wYXRoID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3BhdGg6bGFzdC1jaGlsZCcpXG4gICAgdGhpcy5wYXRoTGVuZ3RoID0gdGhpcy5wYXRoLmdldFRvdGFsTGVuZ3RoKClcbiAgICB0aGlzLnBhdGhWYWx1ZSA9IHRoaXMucGF0aExlbmd0aFxuXG4gICAgR1NBUC5zZXQodGhpcy5wYXRoLCB7XG4gICAgICBzdHJva2VEYXNob2Zmc2V0OiB0aGlzLnBhdGhMZW5ndGgsXG4gICAgICBzdHJva2VEYXNoYXJyYXk6IGAke3RoaXMucGF0aExlbmd0aH0gJHt0aGlzLnBhdGhMZW5ndGh9YFxuICAgIH0pXG4gIH1cblxuICBvbk1vdXNlRW50ZXIgKCkge1xuICAgIHRoaXMucGF0aFZhbHVlIC09IHRoaXMucGF0aExlbmd0aFxuXG4gICAgR1NBUC50byh0aGlzLnBhdGgsIHtcbiAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgZWFzZSxcbiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMucGF0aFZhbHVlXG4gICAgfSlcblxuICAgIHRoaXMudGltZWxpbmUucGxheSgpXG4gIH1cblxuICBvbk1vdXNlTGVhdmUgKCkge1xuICAgIHRoaXMucGF0aFZhbHVlIC09IHRoaXMucGF0aExlbmd0aFxuXG4gICAgR1NBUC50byh0aGlzLnBhdGgsIHtcbiAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgZWFzZSxcbiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IHRoaXMucGF0aFZhbHVlXG4gICAgfSlcblxuICAgIHRoaXMudGltZWxpbmUucmV2ZXJzZSgpXG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycyAoKSB7XG4gICAgdGhpcy5vbk1vdXNlRW50ZXJFdmVudCA9IHRoaXMub25Nb3VzZUVudGVyLmJpbmQodGhpcylcbiAgICB0aGlzLm9uTW91c2VMZWF2ZUV2ZW50ID0gdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKVxuXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm9uTW91c2VFbnRlckV2ZW50KVxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmVFdmVudClcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMub25Nb3VzZUVudGVyRXZlbnQpXG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZUV2ZW50KVxuICB9XG59XG4iLCJpbXBvcnQgUHJlZml4IGZyb20gJ3ByZWZpeCdcblxuaW1wb3J0IHsgQlJFQUtQT0lOVF9UQUJMRVQgfSBmcm9tICd1dGlscy9icmVha3BvaW50cydcbmltcG9ydCB7IGdldE9mZnNldCB9IGZyb20gJ3V0aWxzL2RvbSdcbmltcG9ydCB7IGNsYW1wLCBtYXAgfSBmcm9tICd1dGlscy9tYXRoJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yICh7IGVsZW1lbnQgfSkge1xuICAgIHRoaXMudHJhbnNmb3JtID0gUHJlZml4KCd0cmFuc2Zvcm0nKVxuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgIHRoaXMubWVkaWEgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2ltZycpXG4gICAgdGhpcy5tZWRpYS5vbmxvYWQgPSBfID0+IHtcbiAgICAgIHRoaXMub25SZXNpemUoKVxuICAgIH1cblxuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2VcblxuICAgIHRoaXMucGFyYWxsYXggPSB7XG4gICAgICBjdXJyZW50OiAtdGhpcy5hbW91bnQsXG4gICAgICB0YXJnZXQ6IC10aGlzLmFtb3VudFxuICAgIH1cblxuICAgIHRoaXMuc2NhbGUgPSB7XG4gICAgICBjdXJyZW50OiAxLjE1LFxuICAgICAgdGFyZ2V0OiAxLjE1XG4gICAgfVxuXG4gICAgdGhpcy5vblJlc2l6ZSgpXG4gIH1cblxuICBvblJlc2l6ZSAoKSB7XG4gICAgY29uc29sZS5sb2coJ29uUmVzaXplJylcblxuICAgIHRoaXMuYW1vdW50ID0gd2luZG93LmlubmVyV2lkdGggPCBCUkVBS1BPSU5UX1RBQkxFVCA/IDEwIDogMTUwXG4gICAgdGhpcy5vZmZzZXQgPSBnZXRPZmZzZXQodGhpcy5lbGVtZW50KVxuICB9XG5cbiAgdXBkYXRlIChzY3JvbGwpIHtcbiAgICBpZiAoIXRoaXMub2Zmc2V0KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB7IGlubmVySGVpZ2h0IH0gPSB3aW5kb3dcblxuICAgIGNvbnN0IG9mZnNldEJvdHRvbSA9IHNjcm9sbC5jdXJyZW50ICsgaW5uZXJIZWlnaHRcblxuICAgIGlmIChvZmZzZXRCb3R0b20gPj0gdGhpcy5vZmZzZXQudG9wKSB7XG4gICAgICB0aGlzLnBhcmFsbGF4ID0gY2xhbXAoLXRoaXMuYW1vdW50LCB0aGlzLmFtb3VudCwgbWFwKHRoaXMub2Zmc2V0LnRvcCAtIHNjcm9sbC5jdXJyZW50LCAtdGhpcy5vZmZzZXQuaGVpZ2h0LCBpbm5lckhlaWdodCwgdGhpcy5hbW91bnQsIC10aGlzLmFtb3VudCkpXG4gICAgICB0aGlzLnNjYWxlID0gY2xhbXAoMSwgMS4xNSwgbWFwKHRoaXMub2Zmc2V0LnRvcCAtIHNjcm9sbC5jdXJyZW50LCAtdGhpcy5vZmZzZXQuaGVpZ2h0LCBpbm5lckhlaWdodCwgMSwgMS4xNSkpXG5cbiAgICAgIHRoaXMubWVkaWEuc3R5bGVbdGhpcy50cmFuc2Zvcm1dID0gYHRyYW5zbGF0ZTNkKDAsICR7dGhpcy5wYXJhbGxheH1weCwgMCkgc2NhbGUoJHt0aGlzLnNjYWxlfSlgXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVkaWEuc3R5bGVbdGhpcy50cmFuc2Zvcm1dID0gYHRyYW5zbGF0ZTNkKDAsIC0ke3RoaXMuYW1vdW50fXB4LCAwKSBzY2FsZSgxLjE1KWBcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBhdXRvQmluZCBmcm9tIFwiYXV0by1iaW5kXCI7XHJcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSBcImV2ZW50c1wiO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgUHJlZml4IGZyb20gXCJwcmVmaXhcIjtcclxuaW1wb3J0IGVhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCI7XHJcbmltcG9ydCBtYXAgZnJvbSBcImxvZGFzaC9tYXBcIjtcclxuXHJcbmltcG9ydCBCdXR0b24gZnJvbSBcImFuaW1hdGlvbnMvQnV0dG9uXCI7XHJcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vYW5pbWF0aW9ucy9MYWJlbFwiO1xyXG5pbXBvcnQgVGl0bGUgZnJvbSBcIi4uL2FuaW1hdGlvbnMvVGl0bGVcIjtcclxuaW1wb3J0IFBhcmFsbGF4IGZyb20gXCJhbmltYXRpb25zL1BhcmFsbGF4XCI7XHJcbmltcG9ydCBQYXJhZ3JhcGggZnJvbSBcIi4uL2FuaW1hdGlvbnMvUGFyYWdyYXBoXCI7XHJcbmltcG9ydCBIaWdobGlnaHQgZnJvbSBcIi4uL2FuaW1hdGlvbnMvSGlnaGxpZ2h0XCI7XHJcblxyXG5pbXBvcnQgQXN5bmNMb2FkIGZyb20gXCIuL0FzeW5jbG9hZFwiO1xyXG5cclxuaW1wb3J0IHsgbWFwRWFjaCB9IGZyb20gXCJ1dGlscy9kb21cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICBjb25zdHJ1Y3Rvcih7IGNsYXNzZXMsIGVsZW1lbnQsIGVsZW1lbnRzLCBpZCB9KSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGF1dG9CaW5kKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuY2xhc3NlcyA9IHtcclxuICAgICAgLi4uY2xhc3NlcyxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zZWxlY3RvcnMgPSB7XHJcbiAgICAgIGVsZW1lbnQsXHJcbiAgICAgIGVsZW1lbnRzOiB7XHJcbiAgICAgICAgcHJlbG9hZGVyczogXCJbZGF0YS1zcmNdXCIsXHJcblxyXG4gICAgICAgIGFuaW1hdGlvbnNCdXR0b25zOiAnW2RhdGEtYW5pbWF0aW9uPVwiYnV0dG9uXCJdJyxcclxuICAgICAgICBhbmltYXRpb25zTGlua3M6ICdbZGF0YS1hbmltYXRpb249XCJsaW5rXCJdJyxcclxuICAgICAgICBhbmltYXRpb25zUGFyYWxsYXhlczogJ1tkYXRhLWFuaW1hdGlvbj1cInBhcmFsbGF4XCJdJyxcclxuICAgICAgICBhbmltYXRpb25IaWdobGlnaHRzOiAnW2RhdGEtYW5pbWF0aW9uPVwiaGlnaGxpZ2h0XCJdJyxcclxuICAgICAgICBhbmltYXRpb25MYWJlbHM6ICdbZGF0YS1hbmltYXRpb249XCJsYWJlbFwiXScsXHJcbiAgICAgICAgYW5pbWF0aW9uVGl0bGVzOiAnW2RhdGEtYW5pbWF0aW9uPVwidGl0bGVcIl0nLFxyXG4gICAgICAgIGFuaW1hdGlvblBhcmFncmFwaHM6ICdbZGF0YS1hbmltYXRpb249XCJwYXJhZ3JhcGhcIl0nLFxyXG5cclxuICAgICAgICAuLi5lbGVtZW50cyxcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zY3JvbGwgPSB7XHJcbiAgICAgIGVhc2U6IDAuMDcsXHJcbiAgICAgIHBvc2l0aW9uOiAwLFxyXG4gICAgICBjdXJyZW50OiAwLFxyXG4gICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgIGxpbWl0OiAwLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcblxyXG4gICAgdGhpcy50cmFuc2Zvcm1QcmVmaXggPSBQcmVmaXgoXCJ0cmFuc2Zvcm1cIik7XHJcblxyXG4gICAgdGhpcy5jcmVhdGUoKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuYW5pbWF0aW9ucyA9IFtdO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3RvcnMuZWxlbWVudCk7XHJcbiAgICB0aGlzLmVsZW1lbnRzID0ge307XHJcblxyXG4gICAgZWFjaCh0aGlzLnNlbGVjdG9ycy5lbGVtZW50cywgKHNlbGVjdG9yLCBrZXkpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHNlbGVjdG9yIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50IHx8XHJcbiAgICAgICAgc2VsZWN0b3IgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QgfHxcclxuICAgICAgICBBcnJheS5pc0FycmF5KHNlbGVjdG9yKVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBzZWxlY3RvcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgIC8vIGlmIGVtcHR5IE5vZGVMaXN0XHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNba2V5XS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUFuaW1hdGlvbnMoKTtcclxuICAgIHRoaXMuY3JlYXRlT2JzZXJ2ZXIoKTtcclxuICAgIHRoaXMuY3JlYXRlUHJlbG9hZGVyKCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVBbmltYXRpb25zKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCdXR0b25zLlxyXG4gICAgICovXHJcbiAgICB0aGlzLmFuaW1hdGlvbnNCdXR0b25zID0gbWFwRWFjaChcclxuICAgICAgdGhpcy5lbGVtZW50cy5hbmltYXRpb25zQnV0dG9ucyxcclxuICAgICAgKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCdXR0b24oe1xyXG4gICAgICAgICAgZWxlbWVudCxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFuaW1hdGlvbnMucHVzaCguLi50aGlzLmFuaW1hdGlvbnNCdXR0b25zKTtcclxuXHJcbiAgICAvLyBIaWdobGlnaHRzXHJcbiAgICB0aGlzLmFuaW1hdGlvbkhpZ2hsaWdodHMgPSBtYXAoXHJcbiAgICAgIHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uSGlnaGxpZ2h0cyxcclxuICAgICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IEhpZ2hsaWdodCh7IGVsZW1lbnQgfSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25IaWdobGlnaHRzKTtcclxuXHJcbiAgICAvLyBUaXRsZXNcclxuICAgIHRoaXMuYW5pbWF0aW9uVGl0bGVzID0gbWFwKHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uVGl0bGVzLCAoZWxlbWVudCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFRpdGxlKHsgZWxlbWVudCB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uVGl0bGVzKTtcclxuXHJcbiAgICAvLyBQYXJhZ3JhcGhzXHJcbiAgICB0aGlzLmFuaW1hdGlvblBhcmFncmFwaHMgPSBtYXAoXHJcbiAgICAgIHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uUGFyYWdyYXBocyxcclxuICAgICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFBhcmFncmFwaCh7IGVsZW1lbnQgfSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25QYXJhZ3JhcGhzKTtcclxuXHJcbiAgICAvLyBMYWJlbFxyXG4gICAgdGhpcy5hbmltYXRpb25MYWJlbHMgPSBtYXAodGhpcy5lbGVtZW50cy5hbmltYXRpb25MYWJlbHMsIChlbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgTGFiZWwoeyBlbGVtZW50IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hbmltYXRpb25zLnB1c2goLi4udGhpcy5hbmltYXRpb25MYWJlbHMpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XHJcbiAgICB0aGlzLm9ic2VydmVyID0gbmV3IHdpbmRvdy5SZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuc2Nyb2xsLmxpbWl0ID1cclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudHMud3JhcHBlcik7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQcmVsb2FkZXIoKSB7XHJcbiAgICB0aGlzLnByZWxvYWRlcnMgPSBtYXAodGhpcy5lbGVtZW50cy5wcmVsb2FkZXJzLCAoZWxlbWVudCkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IEFzeW5jTG9hZCh7IGVsZW1lbnQgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuaW1hdGlvbnNcclxuICAgKi9cclxuXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnNjcm9sbCA9IHtcclxuICAgICAgZWFzZTogMC4wNyxcclxuICAgICAgcG9zaXRpb246IDAsXHJcbiAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgIHRhcmdldDogMCxcclxuICAgICAgbGltaXQ6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0KHZhbHVlKSB7XHJcbiAgICB0aGlzLnNjcm9sbC5jdXJyZW50ID0gdGhpcy5zY3JvbGwudGFyZ2V0ID0gdGhpcy5zY3JvbGwubGFzdCA9IHZhbHVlO1xyXG5cclxuICAgIHRoaXMudHJhbnNmb3JtKHRoaXMuZWxlbWVudHMud3JhcHBlciwgdGhpcy5zY3JvbGwuY3VycmVudCk7XHJcbiAgfVxyXG5cclxuICBzaG93KHVybCkge1xyXG4gICAgdGhpcy5yZXNldCgpO1xyXG5cclxuICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgZ3NhcC5zZXQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7XHJcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtYmFja2dyb3VuZFwiKSxcclxuICAgICAgY29sb3I6IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbG9yXCIpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSh1cmwpIHtcclxuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIC8vIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgLy8gICB0aGlzLmRlc3Ryb3koKTtcclxuXHJcbiAgICAvLyAgIHRoaXMuYW5pbWF0aW9uT3V0ID0gZ3NhcC50aW1lbGluZSgpO1xyXG4gICAgLy8gICB0aGlzLmFuaW1hdGlvbk91dC50byh0aGlzLmVsZW1lbnQsIHtcclxuICAgIC8vICAgICBhdXRvQWxwaGE6IDAsXHJcbiAgICAvLyAgICAgb25Db21wbGV0ZTogcmVzb2x2ZSxcclxuICAgIC8vICAgfSk7XHJcbiAgICAvLyB9KTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybShlbGVtZW50LCB5KSB7XHJcbiAgICBlbGVtZW50LnN0eWxlW3RoaXMudHJhbnNmb3JtUHJlZml4XSA9IGB0cmFuc2xhdGUzZCgwLCAkey1NYXRoLnJvdW5kKFxyXG4gICAgICB5XHJcbiAgICApfXB4LCAwKWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFdmVudHNcclxuICAgKi9cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMud3JhcHBlcikgcmV0dXJuO1xyXG5cclxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCA9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50cy53cmFwcGVyLmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodDtcclxuXHJcbiAgICAgIGVhY2goXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLFxyXG4gICAgICAgIChhbmltYXRpb24pID0+IGFuaW1hdGlvbi5vblJlc2l6ZSAmJiBhbmltYXRpb24ub25SZXNpemUoKVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbldoZWVsKG5vcm1hbGl6ZWRXaGVlbCkge1xyXG4gICAgY29uc3Qgc3BlZWQgPSBub3JtYWxpemVkV2hlZWwucGl4ZWxZO1xyXG5cclxuICAgIHRoaXMuc2Nyb2xsLnRhcmdldCArPSBzcGVlZDtcclxuXHJcbiAgICByZXR1cm4gc3BlZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb29wc1xyXG4gICAqL1xyXG5cclxuICB1cGRhdGUoKSB7XHJcbiAgICB0aGlzLnNjcm9sbC50YXJnZXQgPSBnc2FwLnV0aWxzLmNsYW1wKFxyXG4gICAgICAwLFxyXG4gICAgICB0aGlzLnNjcm9sbC5saW1pdCxcclxuICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBnc2FwLnV0aWxzLmludGVycG9sYXRlKFxyXG4gICAgICB0aGlzLnNjcm9sbC5jdXJyZW50LFxyXG4gICAgICB0aGlzLnNjcm9sbC50YXJnZXQsXHJcbiAgICAgIHRoaXMuc2Nyb2xsLmVhc2VcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2Nyb2xsLmN1cnJlbnQgPCAwLjAxKSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmVsZW1lbnRzLndyYXBwZXIpIHtcclxuICAgICAgdGhpcy50cmFuc2Zvcm0odGhpcy5lbGVtZW50cy53cmFwcGVyLCB0aGlzLnNjcm9sbC5jdXJyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBlYWNoKHRoaXMuYW5pbWF0aW9ucywgKGFuaW1hdGlvbikgPT4ge1xyXG4gICAgICBhbmltYXRpb24udXBkYXRlICYmIGFuaW1hdGlvbi51cGRhdGUodGhpcy5zY3JvbGwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zY3JvbGwubGFzdCA9IHRoaXMuc2Nyb2xsLmN1cnJlbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaXN0ZW5lcnNcclxuICAgKi9cclxuXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7fVxyXG5cclxuICByZW1vdmVFdmVudExpc3RlbmVycygpIHt9XHJcbn1cclxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiZjhlODg0OWZlMWQ0ZTNmOGY0ZGNcIikiXSwibmFtZXMiOlsiQnV0dG9uIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJlbGVtZW50Iiwic3VwZXIiLCJ0aGlzIiwiY3JlYXRlVGV4dCIsImNyZWF0ZVBhdGgiLCJ0ZXh0IiwidGV4dENvbnRlbnQiLCJlbGVtZW50cyIsIndyYXBwZXIiLCJxdWVyeVNlbGVjdG9yIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwidGV4dFNwYW5zIiwic3BsaXQiLCJhcHBlbmQiLCJleHByZXNzaW9uIiwiaG92ZXIiLCJob3ZlclNwYW5zIiwiYXBwZW5kQ2hpbGQiLCJHU0FQIiwibGVmdCIsInBvc2l0aW9uIiwidG9wIiwidGltZWxpbmUiLCJwYXVzZWQiLCJ0byIsImR1cmF0aW9uIiwiZWFzZSIsInRyYW5zZm9ybSIsInN0YWdnZXIiLCJmcm9tVG8iLCJwYXRoIiwicGF0aExlbmd0aCIsImdldFRvdGFsTGVuZ3RoIiwicGF0aFZhbHVlIiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZURhc2hhcnJheSIsIm9uTW91c2VFbnRlciIsInBsYXkiLCJvbk1vdXNlTGVhdmUiLCJyZXZlcnNlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbk1vdXNlRW50ZXJFdmVudCIsImJpbmQiLCJvbk1vdXNlTGVhdmVFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQcmVmaXgiLCJtZWRpYSIsIm9ubG9hZCIsIl8iLCJvblJlc2l6ZSIsImlzVmlzaWJsZSIsInBhcmFsbGF4IiwiY3VycmVudCIsImFtb3VudCIsInRhcmdldCIsInNjYWxlIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJCUkVBS1BPSU5UX1RBQkxFVCIsIm9mZnNldCIsImdldE9mZnNldCIsInVwZGF0ZSIsInNjcm9sbCIsImlubmVySGVpZ2h0IiwiY2xhbXAiLCJtYXAiLCJoZWlnaHQiLCJzdHlsZSIsIkV2ZW50RW1pdHRlciIsImNsYXNzZXMiLCJpZCIsImF1dG9CaW5kIiwic2VsZWN0b3JzIiwicHJlbG9hZGVycyIsImFuaW1hdGlvbnNCdXR0b25zIiwiYW5pbWF0aW9uc0xpbmtzIiwiYW5pbWF0aW9uc1BhcmFsbGF4ZXMiLCJhbmltYXRpb25IaWdobGlnaHRzIiwiYW5pbWF0aW9uTGFiZWxzIiwiYW5pbWF0aW9uVGl0bGVzIiwiYW5pbWF0aW9uUGFyYWdyYXBocyIsImxpbWl0IiwidHJhbnNmb3JtUHJlZml4IiwiY3JlYXRlIiwiYW5pbWF0aW9ucyIsImVhY2giLCJzZWxlY3RvciIsImtleSIsIkhUTUxFbGVtZW50IiwiTm9kZUxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY3JlYXRlQW5pbWF0aW9ucyIsImNyZWF0ZU9ic2VydmVyIiwiY3JlYXRlUHJlbG9hZGVyIiwibWFwRWFjaCIsImluZGV4IiwicHVzaCIsIkhpZ2hsaWdodCIsIlRpdGxlIiwiUGFyYWdyYXBoIiwiTGFiZWwiLCJvYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xpZW50SGVpZ2h0Iiwib2JzZXJ2ZSIsIkFzeW5jTG9hZCIsInJlc2V0Iiwic2V0IiwidmFsdWUiLCJsYXN0Iiwic2hvdyIsInVybCIsImdzYXAiLCJkb2N1bWVudEVsZW1lbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRBdHRyaWJ1dGUiLCJjb2xvciIsIlByb21pc2UiLCJyZXNvbHZlIiwiaGlkZSIsInkiLCJNYXRoIiwicm91bmQiLCJhbmltYXRpb24iLCJvbldoZWVsIiwibm9ybWFsaXplZFdoZWVsIiwic3BlZWQiLCJwaXhlbFkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=